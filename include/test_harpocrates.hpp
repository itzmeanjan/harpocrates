#pragma once
#include "harpocrates.hpp"
#include "utils.hpp"
#include <cassert>

// Tests functional correctness of Harpocrates cipher implementation
static inline void
test_harpocrates()
{
  constexpr size_t ct_len = harpocrates_common::BLOCK_LEN;

  // acquire memory resources
  uint8_t* lut = static_cast<uint8_t*>(std::malloc(256));
  uint8_t* inv_lut = static_cast<uint8_t*>(std::malloc(256));
  uint8_t* txt = static_cast<uint8_t*>(std::malloc(ct_len));
  uint8_t* enc = static_cast<uint8_t*>(std::malloc(ct_len));
  uint8_t* dec = static_cast<uint8_t*>(std::malloc(ct_len));

  harpocrates_utils::generate_lut(lut);              // used for encryption
  harpocrates_utils::generate_inv_lut(lut, inv_lut); // used for decryption

  random_data(txt, ct_len); // random plain text

  harpocrates::encrypt(lut, txt, enc);     // encrypt a block
  harpocrates::decrypt(inv_lut, enc, dec); // decrypt a block

  // check that decryption worked as expected
  for (size_t i = 0; i < ct_len; i++) {
    assert((txt[i] ^ dec[i]) == 0u);
  }

  // deallocate all resources
  std::free(lut);
  std::free(inv_lut);
  std::free(txt);
  std::free(enc);
  std::free(dec);
}

// Test to ensure conformance with Harpocrates specification, defined in
// https://eprint.iacr.org/2022/519.pdf
//
// This test asserts results ( computed cipher texts ) against Known Answer
// Tests provided along with above linked paper ( see Appendix B )
static inline void
test_harpocrates_kat()
{
  // See Appendix B of Harpocrates specification
  // https://eprint.iacr.org/2022/519.pdf
  constexpr uint8_t lut[256] = {
    0xda, 0x7a, 0xe7, 0x93, 0xd7, 0xae, 0xd3, 0xfa, 0x20, 0x60, 0x70, 0x62,
    0xc9, 0x9d, 0x5e, 0x6a, 0x4a, 0xe1, 0x8d, 0xb4, 0x74, 0xce, 0x55, 0xac,
    0xea, 0xc3, 0x3a, 0xd0, 0x8b, 0x3d, 0x49, 0x7f, 0x82, 0xf3, 0xf6, 0x90,
    0x6b, 0x3c, 0xf9, 0xba, 0xdf, 0xb1, 0x11, 0xfe, 0x14, 0x73, 0x06, 0x2a,
    0xe3, 0x96, 0x6c, 0x0e, 0x13, 0x65, 0x2e, 0xd1, 0x01, 0xc2, 0xcd, 0x47,
    0x5a, 0xd5, 0x4b, 0x10, 0xd2, 0xd8, 0x69, 0x2b, 0x1d, 0xf5, 0x99, 0xe5,
    0xb5, 0x03, 0x9a, 0xf0, 0x37, 0xcb, 0x7d, 0x23, 0x53, 0x81, 0x59, 0x16,
    0x2d, 0x94, 0xb2, 0xa7, 0x40, 0x86, 0x24, 0xeb, 0x95, 0x1f, 0x83, 0x3b,
    0xf8, 0xf7, 0x0d, 0x28, 0xfd, 0xca, 0x51, 0xdb, 0x97, 0x56, 0x43, 0x5d,
    0x5f, 0x9b, 0x71, 0x63, 0x78, 0xf1, 0x52, 0xff, 0x18, 0xc5, 0x64, 0x32,
    0x6f, 0x8c, 0x9e, 0xdc, 0x30, 0xec, 0xd9, 0xa9, 0x42, 0xa6, 0x0a, 0xcc,
    0x9f, 0x4c, 0xa3, 0x08, 0xee, 0x57, 0x36, 0xb0, 0xef, 0x0f, 0x25, 0x8e,
    0xe2, 0x76, 0x6e, 0xfc, 0x35, 0x79, 0x5b, 0xe0, 0x26, 0x98, 0xf2, 0x88,
    0xf4, 0x67, 0xaa, 0x33, 0x6d, 0xd4, 0x41, 0xa0, 0xc0, 0x3f, 0x72, 0xe4,
    0x15, 0x07, 0xc6, 0x7b, 0x44, 0xed, 0xde, 0x91, 0x2f, 0x48, 0x04, 0x61,
    0xa8, 0x39, 0xad, 0xb6, 0xc8, 0xc1, 0xaf, 0x7c, 0xb9, 0xa5, 0x27, 0x29,
    0x0c, 0x58, 0x34, 0xab, 0x21, 0xe8, 0x9c, 0x19, 0xa2, 0x8a, 0x0b, 0x80,
    0x68, 0xb7, 0xe9, 0xa4, 0x89, 0x4f, 0x12, 0xdd, 0xc7, 0x1e, 0xe6, 0x75,
    0x66, 0x3e, 0x8f, 0xcf, 0xd6, 0x54, 0x5c, 0xb8, 0x92, 0xbf, 0x22, 0x85,
    0x17, 0x05, 0xbb, 0x4d, 0xc4, 0x50, 0x02, 0xb3, 0x77, 0x87, 0x1c, 0xbc,
    0x1a, 0x45, 0x2c, 0x09, 0x84, 0x00, 0x1b, 0xbe, 0x4e, 0x31, 0x7e, 0xa1,
    0x38, 0xfb, 0x46, 0xbd
  };

  // precompute inverse of look up table, to be used during message block
  // decryption
  uint8_t inv_lut[256];
  harpocrates_utils::generate_inv_lut(lut, inv_lut);

  constexpr size_t ct_len = harpocrates_common::BLOCK_LEN;

  // See row 1 of table given in Appendix B of Harpocrates specification
  // https://eprint.iacr.org/2022/519.pdf
  {
    constexpr uint8_t txt[ct_len] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00 };
    const std::string cipher = "5f5bc52acc8665cd08700f35b8ab66dc";

    uint8_t enc[ct_len];
    uint8_t dec[ct_len];

    harpocrates::encrypt(lut, txt, enc);
    harpocrates::decrypt(inv_lut, enc, dec);

    for (size_t i = 0; i < ct_len; i++) {
      assert((txt[i] ^ dec[i]) == 0);
    }

    // to ensure conformance with Harpocrates standard
    assert(to_hex(enc, ct_len) == cipher);
  }

  // See row 2 of table given in Appendix B of Harpocrates specification
  // https://eprint.iacr.org/2022/519.pdf
  {
    constexpr uint8_t txt[ct_len] = { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00 };
    const std::string cipher = "99ebb44375eab43dc65c7ae5526f0a54";

    uint8_t enc[ct_len];
    uint8_t dec[ct_len];

    harpocrates::encrypt(lut, txt, enc);
    harpocrates::decrypt(inv_lut, enc, dec);

    for (size_t i = 0; i < ct_len; i++) {
      assert((txt[i] ^ dec[i]) == 0);
    }

    // to ensure conformance with Harpocrates standard
    assert(to_hex(enc, ct_len) == cipher);
  }

  // See row 3 of table given in Appendix B of Harpocrates specification
  // https://eprint.iacr.org/2022/519.pdf
  {
    constexpr uint8_t txt[ct_len] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x01 };
    const std::string cipher = "0d1998890f92f0b97e5199d6c5f10764";

    uint8_t enc[ct_len];
    uint8_t dec[ct_len];

    harpocrates::encrypt(lut, txt, enc);
    harpocrates::decrypt(inv_lut, enc, dec);

    for (size_t i = 0; i < ct_len; i++) {
      assert((txt[i] ^ dec[i]) == 0);
    }

    // to ensure conformance with Harpocrates standard
    assert(to_hex(enc, ct_len) == cipher);
  }

  // See row 4 of table given in Appendix B of Harpocrates specification
  // https://eprint.iacr.org/2022/519.pdf
  {
    constexpr uint8_t txt[ct_len] = { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                      0x00, 0x00, 0x00, 0x01 };
    const std::string cipher = "e5ac90467b7d76dd9a1d625225e15ff1";

    uint8_t enc[ct_len];
    uint8_t dec[ct_len];

    harpocrates::encrypt(lut, txt, enc);
    harpocrates::decrypt(inv_lut, enc, dec);

    for (size_t i = 0; i < ct_len; i++) {
      assert((txt[i] ^ dec[i]) == 0);
    }

    // to ensure conformance with Harpocrates standard
    assert(to_hex(enc, ct_len) == cipher);
  }
}
